server {
    listen 80;
    server_name easybeatz.local;
    return 301 https://$host$request_uri; # Redirect HTTP to HTTPS
}

server {
    listen 443 ssl;
    server_name easybeatz.local;

    ssl_certificate /etc/nginx/certs/easybeatz.crt;
    ssl_certificate_key /etc/nginx/certs/easybeatz.key;

    location / {
        proxy_pass http://app:3000/;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /api/ {
        proxy_pass http://api:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        client_max_body_size 500M;
    }

    location /admin/ {
        proxy_pass http://api:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /static/ {
        proxy_pass http://api:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

server {
    listen 80;
    server_name media.easybeatz.local;
    return 301 https://$host$request_uri; # Redirect HTTP to HTTPS
}

server {
    listen 443 ssl;
    server_name media.easybeatz.local;

    ssl_certificate /etc/nginx/certs/media.easybeatz.crt;
    ssl_certificate_key /etc/nginx/certs/media.easybeatz.key;

    location / {
        root /media;  # Serve files from the shared media volume
        try_files $uri $uri/ =404;
        access_log /var/log/nginx/media_access.log;
        error_log /var/log/nginx/media_error.log;
    }
}
